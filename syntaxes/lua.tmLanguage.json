{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Lua Halion",
	"patterns": [
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
			"name": "constant.numeric.integer.hexadecimal.lua"
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
			"name": "constant.numeric.float.hexadecimal.lua"
		},
		{
			"match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
			"name": "constant.numeric.integer.lua"
		},
		{
			"match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
			"name": "constant.numeric.float.lua"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"name": "string.quoted.single.lua",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"name": "string.quoted.double.lua",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
			"beginCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.lua"
				},
				"1": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"contentName": "meta.embedded.lua",
			"end": "(\\]\\2\\])",
			"endCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.lua"
				},
				"1": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"patterns": [
				{
					"include": "source.c"
				}
			]
		},
		{
			"begin": "(?<!--)\\[(=*)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "\\]\\1\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"name": "string.quoted.other.multiline.lua"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.lua"
				}
			},
			"match": "\\A(#!).*$\\n?",
			"name": "comment.line.shebang.lua"
		},
		{
			"begin": "(^[ \\t]+)?(?=--)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.lua"
				}
			},
			"end": "(?!\\G)((?!^)[ \\t]+\\n)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.trailing.lua"
				}
			},
			"patterns": [
				{
					"begin": "--\\[(=*)\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.lua"
						}
					},
					"end": "\\]\\1\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.lua"
						}
					},
					"name": "comment.block.lua"
				},
				{
					"begin": "--",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lua"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-dash.lua"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.goto.lua"
				},
				"2": {
					"name": "constant.other.placeholder.lua"
				}
			},
			"match": "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.label.begin.lua"
				},
				"2": {
					"name": "punctuation.definition.label.end.lua"
				}
			},
			"match": "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)",
			"name": "constant.other.placeholder.lua"
		},
		{
			"match": "\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|function|local|in)\\b",
			"name": "keyword.control.lua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)",
			"name": "constant.language.lua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(self)\\b",
			"name": "variable.language.self.lua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.lua"
		},
		{
			"match": "\\b(addLayerPassword|addQCAssignment|afterTouch|appendBus|appendEffect|appendLayer|appendLayerAsync|appendMidiModule|appendZone|assignAutomation|AudioFile.open|beat2ms|calcModulation|changeNoteExpression|changePan|changeTune|changeVolume|changeVolumedB|clone|controlChange|defineModulation|defineParameter|defineSlotLocal|endUndoBlock|Event|fade|findBusses|findChildren|findEffects|findLayers|findMidiModules|findSlots|findZones|forgetAutomation|getAllocatedMemory|getAutomationIndex|getBarDuration|getBeatDuration|getBeatTime|getBeatTimeInBar|getBus|getCC|getChild|getContext|getDisplayString|getEffect|getElement|getFreeVoices|getHostName|getHostVersion|getKeyProperties|getKeySwitches|getLayer|getMidiModule|getModulationMatrixRow|getMsTime|getNoteDuration|getNoteExpression|getNoteExpressionProperties|getNumQCAssignments|getOutputBus|getParameter|getParameterDefinition|getParameterNormalized|getPeak|getProductName|getProductVersion|getProgram|getQCAssignmentBypass|getQCAssignmentCurve|getQCAssignmentMax|getQCAssignmentMin|getQCAssignmentMode|getQCAssignmentParamId|getQCAssignmentScope|getSamplingRate|getScriptExecTimeOut|getScriptVersion|getSlot|getSlotIndex|getSource1|getSource2|getTempo|getTime|getTimeSignature|getUsedMemory|getUsedVoices|getUsedVoicesOfSlot|getUserPresetPath|getVoices|getZone|hasParameter|insertBus|insertEffect|insertEnvelopePoint|insertEvent|insertLayer|insertLayerAsync|insertMidiModule|insertZone|isKeyDown|isNoteHeld|isOctaveKeyDown|isPlaying|loadPreset|loadPresetAsync|messageBox|ms2beat|ms2samples|onAfterTouch|onController|onInit|onLoad|onLoadIntoSlot|onLoadSubPreset|onNote|onNoteExpression|onPitchBend|onRelease|onRemoveFromSlot|onSave|onSaveSubPreset|onTriggerPad|onUnhandledEvent|openURL|pitchBend|playNote|playTriggerPad|postEvent|printRaw|readMidiFile|releaseVoice|removeBus|removeEffect|removeEnvelopePoint|removeFromParent|removeLayer|removeMidiModule|removeQCAssignment|removeZone|runAsync|samples2ms|setName|setOutputBus|setParameter|setParameterNormalized|setProgram|setQCAssignmentBypass|setQCAssignmentCurve|setQCAssignmentMax|setQCAssignmentMin|setQCAssignmentMode|setQCAssignmentParamId|setQCAssignmentScope|setScriptExecTimeOut|setSource1|setSource2|sortEvents|spawn|startUndoBlock|wait|waitBeat|waitForRelease|writeMidiFile)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.halion.lua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.library.lua"
		},
		{
			"match": "\\b(and|or|not)\\b",
			"name": "keyword.operator.lua"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.any-method.lua"
		},
		{
			"match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)",
			"name": "variable.other.lua"
		},
		{
			"match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
			"name": "keyword.operator.lua"
		}
	],
	"repository": {
		"escaped_char": {
			"patterns": [
				{
					"match": "\\\\[abfnrtvz\\\\\"'\\n]",
					"name": "constant.character.escape.lua"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.byte.lua"
				},
				{
					"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
					"name": "constant.character.escape.byte.lua"
				},
				{
					"match": "\\\\u\\{[0-9A-Fa-f]+\\}",
					"name": "constant.character.escape.unicode.lua"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.character.escape.lua"
				}
			]
		}
	},
	"scopeName": "source.lua"
}